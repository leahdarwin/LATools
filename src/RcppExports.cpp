// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// makeCSMatrix2
SEXP makeCSMatrix2(SEXP la);
RcppExport SEXP _LATools_makeCSMatrix2(SEXP laSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type la(laSEXP);
    rcpp_result_gen = Rcpp::wrap(makeCSMatrix2(la));
    return rcpp_result_gen;
END_RCPP
}
// makeLA2
SEXP makeLA2(std::string file, std::string factorDataFile);
RcppExport SEXP _LATools_makeLA2(SEXP fileSEXP, SEXP factorDataFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type factorDataFile(factorDataFileSEXP);
    rcpp_result_gen = Rcpp::wrap(makeLA2(file, factorDataFile));
    return rcpp_result_gen;
END_RCPP
}
// createModels_wrapper
RcppExport SEXP createModels_wrapper(SEXP la_, SEXP response_, SEXP csMatrix_, SEXP maxTerms_, SEXP models_n_, SEXP newModels_n_, SEXP logit_);
RcppExport SEXP _LATools_createModels_wrapper(SEXP la_SEXP, SEXP response_SEXP, SEXP csMatrix_SEXP, SEXP maxTerms_SEXP, SEXP models_n_SEXP, SEXP newModels_n_SEXP, SEXP logit_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type la_(la_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type response_(response_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type csMatrix_(csMatrix_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxTerms_(maxTerms_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type models_n_(models_n_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type newModels_n_(newModels_n_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type logit_(logit_SEXP);
    rcpp_result_gen = Rcpp::wrap(createModels_wrapper(la_, response_, csMatrix_, maxTerms_, models_n_, newModels_n_, logit_));
    return rcpp_result_gen;
END_RCPP
}
// makeVectorXF2
SEXP makeVectorXF2(int length, std::string response_dir, std::string response_column, bool log_data);
RcppExport SEXP _LATools_makeVectorXF2(SEXP lengthSEXP, SEXP response_dirSEXP, SEXP response_columnSEXP, SEXP log_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< std::string >::type response_dir(response_dirSEXP);
    Rcpp::traits::input_parameter< std::string >::type response_column(response_columnSEXP);
    Rcpp::traits::input_parameter< bool >::type log_data(log_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(makeVectorXF2(length, response_dir, response_column, log_data));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _LATools_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_LocatingArray_module();
RcppExport SEXP _rcpp_module_boot_CSMatrix_module();
RcppExport SEXP _rcpp_module_boot_VectorXf_module();

static const R_CallMethodDef CallEntries[] = {
    {"_LATools_makeCSMatrix2", (DL_FUNC) &_LATools_makeCSMatrix2, 1},
    {"_LATools_makeLA2", (DL_FUNC) &_LATools_makeLA2, 2},
    {"_LATools_createModels_wrapper", (DL_FUNC) &_LATools_createModels_wrapper, 7},
    {"_LATools_makeVectorXF2", (DL_FUNC) &_LATools_makeVectorXF2, 4},
    {"_LATools_rcpp_hello_world", (DL_FUNC) &_LATools_rcpp_hello_world, 0},
    {"_rcpp_module_boot_LocatingArray_module", (DL_FUNC) &_rcpp_module_boot_LocatingArray_module, 0},
    {"_rcpp_module_boot_CSMatrix_module", (DL_FUNC) &_rcpp_module_boot_CSMatrix_module, 0},
    {"_rcpp_module_boot_VectorXf_module", (DL_FUNC) &_rcpp_module_boot_VectorXf_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_LATools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
